{
  "info": {
    "name": "TypeScript Express API",
    "description": "Complete API collection for the TypeScript Express.js application with authentication, user management, and health checks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "typescript-express-api-collection"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "apiVersion",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Basic server health check"
          },
          "response": []
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["health", "ready"]
            },
            "description": "Server readiness check with database validation"
          },
          "response": []
        }
      ],
      "description": "Health and readiness check endpoints"
    },
    {
      "name": "API Information",
      "item": [
        {
          "name": "Get API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}"]
            },
            "description": "Get API version and available endpoints"
          },
          "response": []
        }
      ],
      "description": "API information and version details"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.tokens) {",
                  "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', response.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', response.data.user.id);",
                  "        console.log('Tokens saved to environment');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "Sign In",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.tokens) {",
                  "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', response.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', response.data.user.id);",
                  "        console.log('Tokens saved to environment');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/signin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "signin"]
            },
            "description": "Sign in with email and password"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.accessToken) {",
                  "        pm.environment.set('accessToken', response.data.accessToken);",
                  "        console.log('Access token refreshed');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "profile"]
            },
            "description": "Get current user profile (requires authentication)"
          },
          "response": []
        },
        {
          "name": "Sign Out",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/signout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "signout"]
            },
            "description": "Sign out and revoke current tokens"
          },
          "response": []
        },
        {
          "name": "Sign Out All Devices",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/signout-all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "signout-all"]
            },
            "description": "Sign out from all devices and revoke all tokens"
          },
          "response": []
        },
        {
          "name": "Get User Sessions",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "sessions"]
            },
            "description": "Get all active sessions for the current user"
          },
          "response": []
        },
        {
          "name": "Revoke Session",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "sessions", "{{sessionId}}"]
            },
            "description": "Revoke a specific session (replace {{sessionId}} with actual session ID)"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, sign in, token management, and session control"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Get all users (no authentication required)"
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Smith\",\n  \"email\": \"jane.smith@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Create a new user (no authentication required)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Get user by ID (replace {{userId}} with actual user ID)"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Smith Updated\",\n  \"email\": \"jane.updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Update user by ID (replace {{userId}} with actual user ID)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Delete user by ID (replace {{userId}} with actual user ID)"
          },
          "response": []
        }
      ],
      "description": "User management endpoints for CRUD operations"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script to set up common headers",
          "pm.request.headers.add({",
          "    key: 'Accept',",
          "    value: 'application/json'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for common validations",
          "pm.test('Status code is valid', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 404, 500]);",
          "});",
          "",
          "pm.test('Response has JSON structure', function () {",
          "    pm.response.to.have.jsonBody();",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response).to.have.property('success');",
          "});"
        ]
      }
    }
  ]
} 